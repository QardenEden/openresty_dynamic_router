worker_processes  auto;

error_log  /tmp/error.log warn;
pid        /tmp/nginx.pid;

events {
    worker_connections 25000;
    multi_accept on;
    use epoll;
}

worker_rlimit_nofile 30000;

http {
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;

    variables_hash_bucket_size 128;
    variables_hash_max_size 512;

    resolver 8.8.8.8;
    resolver_timeout 10s;

    # Ensure we get the real client ip not the balancer
    real_ip_header     X-Forwarded-For;
    set_real_ip_from   0.0.0.0/0;

    # Force access log to be written in json
    log_format json '{ "caronte": {"exchange":"$host","routingkey":""},'  
                         '"@timestamp": "$time_iso8601", '
                         '"@fields": { '
                         '"vhost": "$host", '
                         '"port": "$server_port", '
                         '"hostname": "$hostname", '
                         '"remote_addr": "$remote_addr", '
                         '"remote_user": "$remote_user", '
                         '"body_bytes_sent": "$body_bytes_sent", '
                         '"request_time": "$request_time", '
                         '"status": "$status", '
                         '"request": "$request", '
                         '"request_method": "$request_method", '
                         '"http_referrer": "$http_referer", '
                         '"http_user_agent": "$http_user_agent" } }';

    access_log  /tmp/access.log  json;

    keepalive_timeout 20;
    client_header_timeout 20;
    client_body_timeout 20;
    reset_timedout_connection on;
    send_timeout 20;

    include mime.types;
    default_type text/html;
    charset UTF-8;

    lua_code_cache on;
    lua_package_path ";;${prefix}lua/?.lua";

    gzip on;
    gzip_proxied any;
    gzip_min_length 256;
    gzip_comp_level 4;
    gzip_types text/plain text/css application/json application/x-javascript text/xml application/xml application/xml+rss text/javascript;

    include /opt/openresty/nginx/conf/sites-enabled/proxy/*.conf;

    # Adds status for graphite
    server {
      server_name localhost;

      location /nginx_status {
        stub_status on;
        access_log   off;
        allow 127.0.0.1;
        deny all;
      }
      location / {
        resolver 8.8.4.4;  # use Google's open DNS server
	      set $host_dest '';
        set $target '';
        access_by_lua '

           function stripchars(str, chrs)
		          local s = str:gsub(chrs, "")
		          return s
		        end

            local key = ngx.var.host
              if not key then
                  ngx.say("Unknown Host")
                  ngx.log(ngx.ERR, "no host found")
                  return ngx.exit(400)
              end

              local redis = require "resty.redis"
              local red = redis:new()

              red:set_timeout(1000) -- 1 second

              local ok, err = red:connect("127.0.0.1", 6379)
              if not ok then
                  ngx.log(ngx.ERR, "failed to connect to redis: ", err)
                  return ngx.exit(500)
              end

              local host, err = red:get(key)
              if not host then
                  ngx.log(ngx.ERR, "failed to get redis key: ", err)
                  return ngx.exit(500)
              end

              if host == ngx.null then
                  ngx.log(ngx.ERR, "no host found for key ", key)
                  ngx.status = 400
                  ngx.print("NO HOST FOUND")
                  return ngx.exit(400)
              end
              ngx.var.host_dest = stripchars( host, "http(s?)://" )
              ngx.var.target = host
          ';
       proxy_set_header        Host    $host_dest;
       proxy_pass $target;
      }
   }
}
